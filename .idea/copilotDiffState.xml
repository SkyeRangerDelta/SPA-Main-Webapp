<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/app/footer.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/footer.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/footer/footer.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/footer/footer.html" />
              <option name="originalContent" value="&lt;p class=&quot;content-header&quot;&gt;Sarim Portmaster&lt;/p&gt;&#10;&lt;p class=&quot;fine-signature&quot;&gt;Admiral Delta&lt;/p&gt;&#10;" />
              <option name="updatedContent" value="&lt;div class=&quot;footer-columns&quot;&gt;&#13;&#10;  &lt;div class=&quot;footer-col&quot;&gt;&#13;&#10;    &lt;p class=&quot;content-header&quot;&gt;Sarim Portmaster&lt;/p&gt;&#13;&#10;    &lt;p class=&quot;fine-signature&quot;&gt;Admiral Delta&lt;/p&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;  &lt;div class=&quot;footer-col&quot;&gt;&#13;&#10;    &lt;p class=&quot;footer-title&quot;&gt;Port Authority&lt;/p&gt;&#13;&#10;    &lt;ul class=&quot;footer-links&quot;&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About the Authority&lt;/a&gt;&lt;/li&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Regulations&lt;/a&gt;&lt;/li&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Public Notices&lt;/a&gt;&lt;/li&gt;&#13;&#10;    &lt;/ul&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;  &lt;div class=&quot;footer-col&quot;&gt;&#13;&#10;    &lt;p class=&quot;footer-title&quot;&gt;Contact &amp; Info&lt;/p&gt;&#13;&#10;    &lt;ul class=&quot;footer-links&quot;&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contact Us&lt;/a&gt;&lt;/li&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Emergency Procedures&lt;/a&gt;&lt;/li&gt;&#13;&#10;      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Harbor Services&lt;/a&gt;&lt;/li&gt;&#13;&#10;    &lt;/ul&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/footer/footer.scss">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/footer/footer.scss" />
              <option name="originalContent" value="// Make the footer stick to the bottom of the viewport&#10;:host {&#10;  position: fixed;&#10;  left: 0;&#10;  bottom: 0;&#10;  width: 100vw;&#10;  z-index: 100;&#10;  background: inherit;&#10;  text-align: center;&#10;  padding: 1.2rem 0 0.7rem 0;&#10;}&#10;&#10;// Optional: Responsive font size for footer text&#10;.content-header, .fine-signature {&#10;  margin: 0;&#10;  line-height: 1.2;&#10;}&#10;&#10;// Prevent content from being hidden behind the fixed footer&#10;body {&#10;  padding-bottom: 70px; // Adjust to match footer height&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Make the footer stick to the bottom of the viewport&#13;&#10;:host {&#13;&#10;  position: fixed;&#13;&#10;  left: 0;&#13;&#10;  bottom: 0;&#13;&#10;  width: 100vw;&#13;&#10;  z-index: 100;&#13;&#10;  background: inherit;&#13;&#10;  text-align: center;&#13;&#10;  padding: 1.2rem 0 0.7rem 0;&#13;&#10;}&#13;&#10;&#13;&#10;// Optional: Responsive font size for footer text&#13;&#10;.content-header, .fine-signature {&#13;&#10;  margin: 0;&#13;&#10;  line-height: 1.2;&#13;&#10;}&#13;&#10;&#13;&#10;// Prevent content from being hidden behind the fixed footer&#13;&#10;body {&#13;&#10;  padding-bottom: 70px; // Adjust to match footer height&#13;&#10;}&#13;&#10;&#13;&#10;.footer-columns {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: row;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: flex-start;&#13;&#10;  width: 100%;&#13;&#10;  max-width: 1200px;&#13;&#10;  margin: 0 auto;&#13;&#10;  padding: 0 2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-col {&#13;&#10;  flex: 1 1 0;&#13;&#10;  min-width: 180px;&#13;&#10;  padding: 0 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-title {&#13;&#10;  font-family: $header-text, serif;&#13;&#10;  font-size: 1.1rem;&#13;&#10;  font-weight: 700;&#13;&#10;  margin-bottom: 0.5rem;&#13;&#10;  margin-top: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-links {&#13;&#10;  list-style: none;&#13;&#10;  padding: 0;&#13;&#10;  margin: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-links li {&#13;&#10;  margin-bottom: 0.3rem;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-links a {&#13;&#10;  color: inherit;&#13;&#10;  text-decoration: none;&#13;&#10;  font-size: 1rem;&#13;&#10;  transition: color 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.footer-links a:hover {&#13;&#10;  color: $color-light-link-accent;&#13;&#10;}&#13;&#10;&#13;&#10;// Responsive adjustments&#13;&#10;@media (max-width: 700px) {&#13;&#10;  .footer-columns {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: center;&#13;&#10;    padding: 0 0.5rem;&#13;&#10;  }&#13;&#10;  .footer-col {&#13;&#10;    min-width: unset;&#13;&#10;    padding: 0.5rem 0;&#13;&#10;    text-align: center;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notice-board/notice-board.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notice-board/notice-board.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { DbHandlerService } from '../services/db-handler-service';&#10;import { Notice } from '../TypeDefs';&#10;import { NgTemplateOutlet } from '@angular/common';&#10;import { NoticeBlurb } from '../notice-blurb/notice-blurb';&#10;&#10;@Component({&#10;  selector: 'app-notice-board',&#10;  imports: [&#10;    NgTemplateOutlet,&#10;    NoticeBlurb&#10;  ],&#10;  templateUrl: './notice-board.html',&#10;  styleUrl: './notice-board.scss'&#10;})&#10;export class NoticeBoard {&#10;  notices: Notice[] = [];&#10;&#10;  loadNotices() {&#10;    this.dbService.getNotices().subscribe( ( noticesRes: any ) =&gt; {&#10;      if ( noticesRes &amp;&amp; noticesRes.length &gt; 0 ) {&#10;        console.log( `Found ${ noticesRes.length } notices.` );&#10;      }&#10;    this.dbService.getNotices().subscribe( ( noticesRes: any ) =&gt; {&#10;      if ( noticesRes &amp;&amp; noticesRes.length &gt; 0 ) {&#10;        console.log( `Found ${ noticesRes.length } notices.` );&#10;      }&#10;      else {&#10;        console.log( 'No notices found.' );&#10;      }&#10;    } );&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { DbHandlerService } from '../services/db-handler-service';&#10;import { Notice } from '../TypeDefs';&#10;import { NgTemplateOutlet } from '@angular/common';&#10;import { NoticeBlurb } from '../notice-blurb/notice-blurb';&#10;&#10;@Component({&#10;  selector: 'app-notice-board',&#10;  imports: [&#10;    NgTemplateOutlet,&#10;    NoticeBlurb&#10;  ],&#10;  templateUrl: './notice-board.html',&#10;  styleUrl: './notice-board.scss'&#10;})&#10;export class NoticeBoard {&#10;  notices: Notice[] = [];&#10;  page = 1;&#10;  pageSize = 16;&#10;  loading = false;&#10;  hasMore = true;&#10;&#10;  constructor( private dbService: DbHandlerService ) {&#10;    this.loadNotices();&#10;  }&#10;&#10;  loadNotices() {&#10;    this.loading = true;&#10;    const offset = ( this.page - 1 ) * this.pageSize;&#10;    this.dbService.getNotices( this.pageSize, offset ).subscribe( ( notices: Notice[] ) =&gt; {&#10;      this.notices = notices;&#10;      this.loading = false;&#10;      this.hasMore = notices.length === this.pageSize;&#10;    } );&#10;  }&#10;&#10;  nextPage() {&#10;    if ( this.hasMore ) {&#10;      this.page++;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;&#10;  prevPage() {&#10;    if ( this.page &gt; 1 ) {&#10;      this.page--;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/services/db-handler-service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/services/db-handler-service.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { catchError, map, Observable, of } from 'rxjs';&#10;import { Department, NoticeRes } from '../TypeDefs';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class DbHandlerService {&#10;&#10;  private apiEndpoint = '/api/v1/';&#10;  private noticesEndpoint = this.apiEndpoint + 'GetNotices';&#10;  private recordsEndpoint = this.apiEndpoint + 'GetRecords';&#10;&#10;  constructor ( private http: HttpClient ) {  }&#10;&#10;  getNotices( limit?: number ) {&#10;        if ( !data || !Array.isArray(data) ) {&#10;      `${this.noticesEndpoint}?limit=${limit || 5}`,&#10;        }&#10;&#10;        if ( !data || !Array.isArray(data) ) {&#10;          return [];&#10;        }&#10;&#10;        // Assuming the data is an array of notices&#10;        return data.map((notice: any) =&gt; {&#10;          return {&#10;            id: notice.id,&#10;            title: notice.title,&#10;            content: notice.content,&#10;            date: new Date(notice.date)&#10;          };&#10;        });&#10;      } ),&#10;      catchError( ( e: unknown ) =&gt; {&#10;        console.error('Error fetching notices:', e);&#10;        return [];&#10;      } )&#10;    );&#10;  }&#10;&#10;  getNoticeById(id: number): Observable&lt;NoticeRes&gt; {&#10;    return this.http.get(`${this.noticesEndpoint}?id=${id}`).pipe(&#10;      map((data: any) =&gt; {&#10;        return {&#10;          status: data.status,&#10;          message: data.message,&#10;          success: data.success,&#10;          notice: data.notice || null&#10;        } as NoticeRes;&#10;      }),&#10;      catchError(( e: any ) =&gt; {&#10;        console.error('Error fetching notice by id:', e);&#10;&#10;        if ( e.status === 500 ) {&#10;          return of({&#10;            status: 500,&#10;            message: 'Error fetching notice',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;          );&#10;        }&#10;&#10;        return of(&#10;          {&#10;            status: e.status || 500,&#10;            message: e.message || 'Unknown error occurred',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;        );&#10;      })&#10;    );&#10;  }&#10;&#10;  getDepartments() {&#10;    return this.http.get(`${this.apiEndpoint}GetDepartments`).pipe(&#10;      map((data: any) =&gt; {&#10;        return data.departments;&#10;      }),&#10;      catchError((e: any) =&gt; {&#10;        console.error('Error fetching departments:', e);&#10;        return of([] as Department[]); // Return an empty array on error&#10;      }&#10;    ));&#10;  }&#10;&#10;  getRecords() {&#10;    return this.http.get(this.recordsEndpoint);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { catchError, map, Observable, of } from 'rxjs';&#10;import { Department, NoticeRes } from '../TypeDefs';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class DbHandlerService {&#10;&#10;  private apiEndpoint = '/api/v1/';&#10;  private noticesEndpoint = this.apiEndpoint + 'GetNotices';&#10;  private recordsEndpoint = this.apiEndpoint + 'GetRecords';&#10;&#10;  constructor ( private http: HttpClient ) {  }&#10;&#10;  getNotices( limit?: number, offset?: number ) {&#10;    const params = [];&#10;    if ( limit !== undefined ) params.push( `limit=${limit}` );&#10;    if ( offset !== undefined ) params.push( `offset=${offset}` );&#10;    const query = params.length ? `?${params.join('&amp;')}` : '';&#10;    return this.http.get(&#10;      `${this.noticesEndpoint}${query}`,&#10;    ).pipe(&#10;      map( (data: any) =&gt; {&#10;        // If API returns {notices: [...], ...}&#10;        if ( data &amp;&amp; Array.isArray(data.notices) ) {&#10;          return data.notices;&#10;        }&#10;        // Fallback for old response&#10;        if ( Array.isArray(data) ) {&#10;          return data;&#10;        }&#10;        return [];&#10;      } ),&#10;      catchError( ( e: unknown ) =&gt; {&#10;        console.error('Error fetching notices:', e);&#10;        return [];&#10;      } )&#10;    );&#10;  }&#10;&#10;  getNoticeById(id: number): Observable&lt;NoticeRes&gt; {&#10;    return this.http.get(`${this.noticesEndpoint}?id=${id}`).pipe(&#10;      map((data: any) =&gt; {&#10;        return {&#10;          status: data.status,&#10;          message: data.message,&#10;          success: data.success,&#10;          notice: data.notice || null&#10;        } as NoticeRes;&#10;      }),&#10;      catchError(( e: any ) =&gt; {&#10;        console.error('Error fetching notice by id:', e);&#10;&#10;        if ( e.status === 500 ) {&#10;          return of({&#10;            status: 500,&#10;            message: 'Error fetching notice',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;          );&#10;        }&#10;&#10;        return of(&#10;          {&#10;            status: e.status || 500,&#10;            message: e.message || 'Unknown error occurred',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;        );&#10;      })&#10;    );&#10;  }&#10;&#10;  getDepartments() {&#10;    return this.http.get(`${this.apiEndpoint}GetDepartments`).pipe(&#10;      map((data: any) =&gt; {&#10;        return data.departments;&#10;      }),&#10;      catchError((e: any) =&gt; {&#10;        console.error('Error fetching departments:', e);&#10;        return of([] as Department[]); // Return an empty array on error&#10;      }&#10;    ));&#10;  }&#10;&#10;  getRecords() {&#10;    return this.http.get(this.recordsEndpoint);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/styles.scss">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/styles.scss" />
              <option name="originalContent" value="// Include theming for Angular Material with `mat.theme()`.&#10;// This Sass mixin will define CSS variables that are used for styling Angular Material&#10;// components according to the Material 3 design spec.&#10;// Learn more about theming and how to use it for your application's&#10;// custom components at https://material.angular.dev/guide/theming&#10;@use '@angular/material' as mat;&#10;@use 'sass:color';&#10;&#10;// Color Variables&#10;// Light Palette&#10;// Coolors: https://coolors.co/f5f6f8-dee2e6-0d47a1-212529-7c5b2f&#10;$color-light-primary: #f5f6f8;&#10;$color-light-surface: #dee2e6;&#10;$color-light-link-accent: #0d47a1;&#10;$color-light-text: #212529;&#10;$color-light-accent: #7c5b2f;&#10;&#10;// Dark Palette&#10;// Coolors: https://coolors.co/121316-6c7a89-90caf9-e3e2e6-d7b377&#10;$color-dark-primary: #121316;&#10;$color-dark-surface: #6c7a89;&#10;$color-dark-link-accent: #90caf9;&#10;$color-dark-text: #e3e2e6;&#10;$color-dark-accent: #d7b377;&#10;&#10;// Specific-purpose colors&#10;$color-blurb-border-warning: #ff9800; // Orange for warnings&#10;$color-blurb-border-info: #2196f3; // Blue for informational notices&#10;$color-blurb-border-critical: #f44336; // Red for critical notices&#10;&#10;// Custom Fonts&#10;$fine-header: 'Cinzel Decorative', serif;&#10;$header-text: 'Libre Baskerville', serif;&#10;$body-text: 'Merriweather', serif;&#10;$handwriting: 'IM FELL DW Pica', serif;&#10;$script: 'Allura', cursive;&#10;$script-fine: 'Luxurious Script', cursive;&#10;&#10;html {&#10;  @include mat.theme((&#10;    color: (&#10;      primary: mat.$azure-palette,&#10;      tertiary: mat.$blue-palette,&#10;    ),&#10;    typography: Roboto,&#10;    density: 0,&#10;  ));&#10;&#10;  // Defer to user's system preference, but allow override via body class&#10;  color-scheme: dark;&#10;&#10;  // Fall back to defined theme variables if Angular Material ones are not available&#10;  background-color: var(--mat-sys-surface, $color-dark-primary);&#10;  color: var(--mat-sys-on-surface, $color-dark-text);&#10;  font: var(--mat-sys-body-medium, 400 1rem/1.5 $body-text, serif);&#10;&#10;  // Optional: High contrast text rendering improvements&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;}&#10;&#10;/* You can add global styles to this file, and also import other style files */&#10;&#10;// Apply to the HTML and Body elements&#10;// Light and Dark color palette assumed to be defined in a SCSS variables file or earlier&#10;&#10;html, body {&#10;  height: 100%;&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  font-family: $body-text, &quot;Helvetica Neue&quot;, sans-serif;&#10;}&#10;&#10;// Dark Mode Styling&#10;body.dark-mode {&#10;  background-color: $color-dark-primary;&#10;  color: $color-dark-text;&#10;}&#10;&#10;// Light Mode Styling&#10;body.light-mode {&#10;  background-color: $color-light-primary;&#10;  color: $color-light-text;&#10;}&#10;&#10;// Font customization for headers&#10;h1, h2, h3 {&#10;  font-family: $fine-header, serif;&#10;}&#10;&#10;// Content headers with Libre Baskerville&#10;.content-header {&#10;  font-family: $header-text, serif;&#10;  font-weight: 700;&#10;}&#10;&#10;// Handwritten text with IM FELL DW Pica&#10;.handwritten-text {&#10;  font-family: $handwriting, serif;&#10;}&#10;&#10;.italic {&#10;  font-style: italic;&#10;}&#10;&#10;// Signatures with Allura&#10;.signature {&#10;  font-family: $script, cursive;&#10;  font-size: 1.5rem;&#10;}&#10;&#10;// Fine signatures with Luxurious Script&#10;.fine-signature {&#10;  font-family: $script-fine, cursive;&#10;  font-size: 2rem;&#10;}&#10;&#10;// Flexbox layout container&#10;.container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  padding: 20px;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;// Header styling&#10;header {&#10;  text-align: center;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;// Footer styling&#10;footer {&#10;  position: fixed;&#10;  left: 0;&#10;  bottom: 0;&#10;  width: 100vw;&#10;  z-index: 100;&#10;  background: inherit;&#10;  box-shadow: 0 -2px 8px rgba(0,0,0,0.04);&#10;  text-align: center;&#10;  padding: 1.2rem 0 0.7rem 0;&#10;}&#10;&#10;.footer-columns {&#10;  display: flex;&#10;  flex-direction: row;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  width: 100%;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 0 2rem;&#10;}&#10;&#10;.footer-col {&#10;  flex: 1 1 0;&#10;  min-width: 180px;&#10;  padding: 0 1rem;&#10;}&#10;&#10;.footer-title {&#10;  font-family: $header-text, serif;&#10;  font-size: 1.1rem;&#10;  font-weight: 700;&#10;  margin-bottom: 0.5rem;&#10;  margin-top: 0.5rem;&#10;}&#10;&#10;.footer-links {&#10;  list-style: none;&#10;  padding: 0;&#10;  margin: 0;&#10;}&#10;&#10;.footer-links li {&#10;  margin-bottom: 0.3rem;&#10;}&#10;&#10;.footer-links a {&#10;  color: inherit;&#10;  text-decoration: none;&#10;  font-size: 1rem;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.footer-links a:hover {&#10;  color: $color-light-link-accent;&#10;}&#10;&#10;// Responsive adjustments&#10;@media (max-width: 700px) {&#10;  .footer-columns {&#10;    flex-direction: column;&#10;    align-items: center;&#10;    padding: 0 0.5rem;&#10;  }&#10;  .footer-col {&#10;    min-width: unset;&#10;    padding: 0.5rem 0;&#10;    text-align: center;&#10;  }&#10;}&#10;&#10;// Prevent content from being hidden behind the fixed footer&#10;body {&#10;  padding-bottom: 70px; // Adjust to match footer height&#10;}&#10;&#10;// Section styling for spacing&#10;section {&#10;  width: 100%;&#10;  max-width: 900px;&#10;  margin: 20px 0;&#10;}&#10;&#10;// Navigation Menu Styling&#10;.nav-menu {&#10;  display: flex;&#10;  gap: 2rem;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin: 16px 0;&#10;}&#10;&#10;.nav-menu a {&#10;  font-family: $header-text, serif;&#10;  font-size: 1.1rem;&#10;  text-decoration: none;&#10;  padding: 8px 16px;&#10;  border-radius: 6px;&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;.nav-menu a:hover {&#10;  background: color.adjust($color-dark-surface, $lightness: 6%);&#10;  color: $color-dark-link-accent;&#10;}&#10;&#10;// Dark Mode Nav Links&#10;body.dark-mode .nav-menu a {&#10;  color: $color-dark-link-accent;&#10;}&#10;body.dark-mode .nav-menu a:hover,&#10;body.dark-mode .nav-menu a.active {&#10;  background: $color-dark-surface;&#10;  color: $color-dark-primary;&#10;}&#10;&#10;// Light Mode Nav Links&#10;body.light-mode .nav-menu a {&#10;  color: $color-light-link-accent;&#10;}&#10;body.light-mode .nav-menu a:hover,&#10;body.light-mode .nav-menu a.active {&#10;  background: $color-light-surface;&#10;  color: $color-light-link-accent;&#10;}&#10;&#10;// Dropdown Menus&#10;.nav-menu-dropdown {&#10;  position: relative;&#10;  display: inline-block;&#10;}&#10;&#10;.nav-sub-menu {&#10;  display: none;&#10;  position: absolute;&#10;  left: 0;&#10;  top: 100%;&#10;  min-width: 220px;&#10;  background: $color-dark-surface;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);&#10;  border-radius: 6px;&#10;  padding: 8px 0;&#10;  z-index: 10;&#10;}&#10;&#10;.nav-menu-dropdown:hover .nav-sub-menu {&#10;  display: block;&#10;}&#10;&#10;.nav-sub-menu a {&#10;  display: block;&#10;  padding: 8px 24px;&#10;  color: inherit;&#10;  text-decoration: none;&#10;  font-size: 1rem;&#10;  border-radius: 0;&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;// Hover/Active styles for dropdown in both modes&#10;body.dark-mode .nav-sub-menu {&#10;  background: $color-dark-surface;&#10;}&#10;body.dark-mode .nav-sub-menu a:hover,&#10;body.dark-mode .nav-sub-menu a.active {&#10;  background: $color-dark-link-accent;&#10;  color: $color-dark-primary;&#10;}&#10;&#10;body.light-mode .nav-sub-menu {&#10;  background: $color-light-primary;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);&#10;  border: 1px solid $color-light-surface;&#10;}&#10;body.light-mode .nav-sub-menu a {&#10;  color: $color-light-link-accent;&#10;}&#10;body.light-mode .nav-sub-menu a:hover,&#10;body.light-mode .nav-sub-menu a.active {&#10;  background: color.adjust($color-light-link-accent, $lightness: 50%);&#10;  color: $color-light-link-accent;&#10;  font-weight: 500;&#10;}&#10;&#10;.notice-board-list {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 1.5rem;&#10;  padding: 1.5rem 0;&#10;}&#10;&#10;.notice-blurb-header {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;  position: relative;&#10;}&#10;&#10;// Base Blurb Styling&#10;.notice-blurb {&#10;  background: $color-dark-surface;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.10);&#10;  padding: 1.25rem 1.5rem;&#10;  transition: background 0.2s, color 0.2s;&#10;  border-left: 6px solid $color-dark-text;&#10;  color: $color-dark-text;&#10;&#10;  .notice-title {&#10;    font-family: $header-text, serif;&#10;    font-size: 1.25rem;&#10;    margin-bottom: 0.5rem;&#10;    color: $color-dark-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    font-family: $body-text, serif;&#10;    font-size: 1rem;&#10;    margin-bottom: 0.75rem;&#10;    color: $color-dark-text;&#10;  }&#10;&#10;  .notice-date-icon {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 64px;&#10;    min-height: 64px;&#10;    padding: 0.25rem;&#10;    border-radius: 6px;&#10;    background: color.adjust($color-dark-surface, $lightness: 6%);&#10;    color: $color-dark-accent;&#10;    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);&#10;    text-align: center;&#10;    font-family: $body-text;&#10;    line-height: 1.1;&#10;&#10;    .date-month {&#10;      font-size: 0.65rem;&#10;      font-weight: 500;&#10;      text-transform: uppercase;&#10;      letter-spacing: 0.05em;&#10;      opacity: 0.9;&#10;    }&#10;&#10;    .date-day {&#10;      font-size: 1.75rem;&#10;      font-weight: 700;&#10;      line-height: 1;&#10;      margin: 2px 0;&#10;    }&#10;&#10;    .date-month-time {&#10;      font-size: 0.65rem;&#10;      font-weight: 500;&#10;      opacity: 0.85;&#10;    }&#10;&#10;    .date-year {&#10;      font-size: 0.6rem;&#10;      font-weight: 400;&#10;      opacity: 0.65;&#10;      margin-top: 2px;&#10;    }&#10;  }&#10;&#10;  body.light-mode .notice-date-icon {&#10;    background: color.adjust($color-light-surface, $lightness: -4%);&#10;    color: $color-light-accent;&#10;  }&#10;}&#10;&#10;.notice-blurb.notice-warning {&#10;  border-left-color: $color-blurb-border-warning;&#10;}&#10;&#10;.notice-blurb.notice-info {&#10;  border-left-color: $color-blurb-border-info;&#10;}&#10;&#10;.notice-blurb.notice-critical {&#10;  border-left-color: $color-blurb-border-critical;&#10;}&#10;&#10;// Light Mode Overrides&#10;body.light-mode .notice-blurb {&#10;  background: $color-light-surface;&#10;  color: $color-light-text;&#10;&#10;  .notice-title {&#10;    color: $color-light-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    color: $color-light-text;&#10;  }&#10;&#10;  .notice-date {&#10;    color: color.adjust($color-light-text, $lightness: -30%);&#10;  }&#10;}&#10;&#10;// Dark Mode Enhancements (optional redundancy)&#10;body.dark-mode .notice-blurb {&#10;  background: $color-dark-surface;&#10;&#10;  .notice-title {&#10;    color: $color-dark-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    color: $color-dark-text;&#10;  }&#10;&#10;  .notice-date {&#10;    color: $color-dark-text;&#10;  }&#10;}&#10;&#10;// Empty State&#10;.no-notices {&#10;  text-align: center;&#10;  color: $color-light-link-accent;&#10;  font-style: italic;&#10;  margin: 2rem 0;&#10;}&#10;&#10;// CCG Info Links Section Styling&#10;.ccg-info-links {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  margin: 2.5rem 0 2rem 0;&#10;  text-align: center;&#10;}&#10;&#10;.ccg-links-row {&#10;  display: flex;&#10;  flex-direction: row;&#10;  justify-content: center;&#10;  gap: 2.5rem;&#10;  margin-top: 1.5rem;&#10;}&#10;&#10;.ccg-link-btn {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: flex-start;&#10;  background: none;&#10;  border: none;&#10;  outline: none;&#10;  text-decoration: none;&#10;  cursor: pointer;&#10;  padding: 1.25rem 2.25rem 1.5rem 2.25rem;&#10;  border-radius: 14px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.08);&#10;  transition: background 0.18s, box-shadow 0.18s, transform 0.12s;&#10;  min-width: 120px;&#10;  min-height: 120px;&#10;}&#10;&#10;.ccg-link-btn:focus,&#10;.ccg-link-btn:hover {&#10;  background: color.adjust($color-dark-surface, $lightness: 8%);&#10;  box-shadow: 0 4px 16px rgba(0,0,0,0.13);&#10;  transform: translateY(-2px) scale(1.03);&#10;}&#10;&#10;body.light-mode .ccg-link-btn:focus,&#10;body.light-mode .ccg-link-btn:hover {&#10;  background: color.adjust($color-light-surface, $lightness: -2%);&#10;}&#10;&#10;.ccg-link-icon {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  margin-bottom: 0.5rem;&#10;  width: 48px;&#10;  height: 48px;&#10;}&#10;&#10;.ccg-link-icon svg {&#10;  width: 40px;&#10;  height: 40px;&#10;  display: block;&#10;}&#10;&#10;.ccg-link-label {&#10;  display: block;&#10;  margin-top: 0.25rem;&#10;  font-size: 1.08rem;&#10;  font-family: $header-text, serif;&#10;  font-weight: 600;&#10;  letter-spacing: 0.01em;&#10;  color: inherit;&#10;}&#10;" />
              <option name="updatedContent" value="// Include theming for Angular Material with `mat.theme()`.&#10;// This Sass mixin will define CSS variables that are used for styling Angular Material&#10;// components according to the Material 3 design spec.&#10;// Learn more about theming and how to use it for your application's&#10;// custom components at https://material.angular.dev/guide/theming&#10;@use '@angular/material' as mat;&#10;@use 'sass:color';&#10;&#10;// Color Variables&#10;// Light Palette&#10;// Coolors: https://coolors.co/f5f6f8-dee2e6-0d47a1-212529-7c5b2f&#10;$color-light-primary: #f5f6f8;&#10;$color-light-surface: #dee2e6;&#10;$color-light-link-accent: #0d47a1;&#10;$color-light-text: #212529;&#10;$color-light-accent: #7c5b2f;&#10;&#10;// Dark Palette&#10;// Coolors: https://coolors.co/121316-6c7a89-90caf9-e3e2e6-d7b377&#10;$color-dark-primary: #121316;&#10;$color-dark-surface: #6c7a89;&#10;$color-dark-link-accent: #90caf9;&#10;$color-dark-text: #e3e2e6;&#10;$color-dark-accent: #d7b377;&#10;&#10;// Specific-purpose colors&#10;$color-blurb-border-warning: #ff9800; // Orange for warnings&#10;$color-blurb-border-info: #2196f3; // Blue for informational notices&#10;$color-blurb-border-critical: #f44336; // Red for critical notices&#10;&#10;// Custom Fonts&#10;$fine-header: 'Cinzel Decorative', serif;&#10;$header-text: 'Libre Baskerville', serif;&#10;$body-text: 'Merriweather', serif;&#10;$handwriting: 'IM FELL DW Pica', serif;&#10;$script: 'Allura', cursive;&#10;$script-fine: 'Luxurious Script', cursive;&#10;&#10;html {&#10;  @include mat.theme((&#10;    color: (&#10;      primary: mat.$azure-palette,&#10;      tertiary: mat.$blue-palette,&#10;    ),&#10;    typography: Roboto,&#10;    density: 0,&#10;  ));&#10;&#10;  // Defer to user's system preference, but allow override via body class&#10;  color-scheme: dark;&#10;&#10;  // Fall back to defined theme variables if Angular Material ones are not available&#10;  background-color: var(--mat-sys-surface, $color-dark-primary);&#10;  color: var(--mat-sys-on-surface, $color-dark-text);&#10;  font: var(--mat-sys-body-medium, 400 1rem/1.5 $body-text, serif);&#10;&#10;  // Optional: High contrast text rendering improvements&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;}&#10;&#10;/* You can add global styles to this file, and also import other style files */&#10;&#10;// Apply to the HTML and Body elements&#10;// Light and Dark color palette assumed to be defined in a SCSS variables file or earlier&#10;&#10;html, body {&#10;  height: 100%;&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  font-family: $body-text, &quot;Helvetica Neue&quot;, sans-serif;&#10;}&#10;&#10;// Dark Mode Styling&#10;body.dark-mode {&#10;  background-color: $color-dark-primary;&#10;  color: $color-dark-text;&#10;}&#10;&#10;// Light Mode Styling&#10;body.light-mode {&#10;  background-color: $color-light-primary;&#10;  color: $color-light-text;&#10;}&#10;&#10;// Font customization for headers&#10;h1, h2, h3 {&#10;  font-family: $fine-header, serif;&#10;}&#10;&#10;// Content headers with Libre Baskerville&#10;.content-header {&#10;  font-family: $header-text, serif;&#10;  font-weight: 700;&#10;}&#10;&#10;// Handwritten text with IM FELL DW Pica&#10;.handwritten-text {&#10;  font-family: $handwriting, serif;&#10;}&#10;&#10;.italic {&#10;  font-style: italic;&#10;}&#10;&#10;// Signatures with Allura&#10;.signature {&#10;  font-family: $script, cursive;&#10;  font-size: 1.5rem;&#10;}&#10;&#10;// Fine signatures with Luxurious Script&#10;.fine-signature {&#10;  font-family: $script-fine, cursive;&#10;  font-size: 2rem;&#10;}&#10;&#10;// Flexbox layout container&#10;.container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  padding: 20px;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;// Header styling&#10;header {&#10;  text-align: center;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;// Footer styling&#10;footer {&#10;  position: fixed;&#10;  left: 0;&#10;  bottom: 0;&#10;  width: 100vw;&#10;  z-index: 100;&#10;  background: linear-gradient(180deg, rgba(0,0,0,0.03) 0%, rgba(0,0,0,0.08) 100%), inherit;&#10;  border-top: 1.5px solid rgba(0,0,0,0.08);&#10;  text-align: center;&#10;  padding: 1.2rem 0 0.7rem 0;&#10;}&#10;&#10;.footer-columns {&#10;  display: flex;&#10;  flex-direction: row;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  width: 100%;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 0 2rem;&#10;}&#10;&#10;.footer-col {&#10;  flex: 1 1 0;&#10;  min-width: 180px;&#10;  padding: 0 1rem;&#10;}&#10;&#10;.footer-title {&#10;  font-family: $header-text, serif;&#10;  font-size: 1.1rem;&#10;  font-weight: 700;&#10;  margin-bottom: 0.5rem;&#10;  margin-top: 0.5rem;&#10;}&#10;&#10;.footer-links {&#10;  list-style: none;&#10;  padding: 0;&#10;  margin: 0;&#10;}&#10;&#10;.footer-links li {&#10;  margin-bottom: 0.3rem;&#10;}&#10;&#10;.footer-links a {&#10;  color: inherit;&#10;  text-decoration: none;&#10;  font-size: 1rem;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.footer-links a:hover {&#10;  color: $color-light-link-accent;&#10;}&#10;&#10;// Responsive adjustments&#10;@media (max-width: 700px) {&#10;  .footer-columns {&#10;    flex-direction: column;&#10;    align-items: center;&#10;    padding: 0 0.5rem;&#10;  }&#10;  .footer-col {&#10;    min-width: unset;&#10;    padding: 0.5rem 0;&#10;    text-align: center;&#10;  }&#10;}&#10;&#10;// Prevent content from being hidden behind the fixed footer&#10;body {&#10;  padding-bottom: 70px; // Adjust to match footer height&#10;}&#10;&#10;// Section styling for spacing&#10;section {&#10;  width: 100%;&#10;  max-width: 900px;&#10;  margin: 20px 0;&#10;}&#10;&#10;// Navigation Menu Styling&#10;.nav-menu {&#10;  display: flex;&#10;  gap: 2rem;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin: 16px 0;&#10;}&#10;&#10;.nav-menu a {&#10;  font-family: $header-text, serif;&#10;  font-size: 1.1rem;&#10;  text-decoration: none;&#10;  padding: 8px 16px;&#10;  border-radius: 6px;&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;.nav-menu a:hover {&#10;  background: color.adjust($color-dark-surface, $lightness: 6%);&#10;  color: $color-dark-link-accent;&#10;}&#10;&#10;// Dark Mode Nav Links&#10;body.dark-mode .nav-menu a {&#10;  color: $color-dark-link-accent;&#10;}&#10;body.dark-mode .nav-menu a:hover,&#10;body.dark-mode .nav-menu a.active {&#10;  background: $color-dark-surface;&#10;  color: $color-dark-primary;&#10;}&#10;&#10;// Light Mode Nav Links&#10;body.light-mode .nav-menu a {&#10;  color: $color-light-link-accent;&#10;}&#10;body.light-mode .nav-menu a:hover,&#10;body.light-mode .nav-menu a.active {&#10;  background: $color-light-surface;&#10;  color: $color-light-link-accent;&#10;}&#10;&#10;// Dropdown Menus&#10;.nav-menu-dropdown {&#10;  position: relative;&#10;  display: inline-block;&#10;}&#10;&#10;.nav-sub-menu {&#10;  display: none;&#10;  position: absolute;&#10;  left: 0;&#10;  top: 100%;&#10;  min-width: 220px;&#10;  background: $color-dark-surface;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);&#10;  border-radius: 6px;&#10;  padding: 8px 0;&#10;  z-index: 10;&#10;}&#10;&#10;.nav-menu-dropdown:hover .nav-sub-menu {&#10;  display: block;&#10;}&#10;&#10;.nav-sub-menu a {&#10;  display: block;&#10;  padding: 8px 24px;&#10;  color: inherit;&#10;  text-decoration: none;&#10;  font-size: 1rem;&#10;  border-radius: 0;&#10;  transition: background 0.2s, color 0.2s;&#10;}&#10;&#10;// Hover/Active styles for dropdown in both modes&#10;body.dark-mode .nav-sub-menu {&#10;  background: $color-dark-surface;&#10;}&#10;body.dark-mode .nav-sub-menu a:hover,&#10;body.dark-mode .nav-sub-menu a.active {&#10;  background: $color-dark-link-accent;&#10;  color: $color-dark-primary;&#10;}&#10;&#10;body.light-mode .nav-sub-menu {&#10;  background: $color-light-primary;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);&#10;  border: 1px solid $color-light-surface;&#10;}&#10;body.light-mode .nav-sub-menu a {&#10;  color: $color-light-link-accent;&#10;}&#10;body.light-mode .nav-sub-menu a:hover,&#10;body.light-mode .nav-sub-menu a.active {&#10;  background: color.adjust($color-light-link-accent, $lightness: 50%);&#10;  color: $color-light-link-accent;&#10;  font-weight: 500;&#10;}&#10;&#10;.notice-board-list {&#10;  display: grid;&#10;  grid-template-columns: 1fr 1fr;&#10;  gap: 1.5rem;&#10;  padding: 1.5rem 0;&#10;}&#10;&#10;.notice-blurb-header {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;  position: relative;&#10;}&#10;&#10;// Base Blurb Styling&#10;.notice-blurb {&#10;  background: $color-dark-surface;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.10);&#10;  padding: 1.25rem 1.5rem;&#10;  transition: background 0.2s, color 0.2s;&#10;  border-left: 6px solid $color-dark-text;&#10;  color: $color-dark-text;&#10;&#10;  .notice-title {&#10;    font-family: $header-text, serif;&#10;    font-size: 1.25rem;&#10;    margin-bottom: 0.5rem;&#10;    color: $color-dark-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    font-family: $body-text, serif;&#10;    font-size: 1rem;&#10;    margin-bottom: 0.75rem;&#10;    color: $color-dark-text;&#10;  }&#10;&#10;  .notice-date-icon {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 64px;&#10;    min-height: 64px;&#10;    padding: 0.25rem;&#10;    border-radius: 6px;&#10;    background: color.adjust($color-dark-surface, $lightness: 6%);&#10;    color: $color-dark-accent;&#10;    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);&#10;    text-align: center;&#10;    font-family: $body-text;&#10;    line-height: 1.1;&#10;&#10;    .date-month {&#10;      font-size: 0.65rem;&#10;      font-weight: 500;&#10;      text-transform: uppercase;&#10;      letter-spacing: 0.05em;&#10;      opacity: 0.9;&#10;    }&#10;&#10;    .date-day {&#10;      font-size: 1.75rem;&#10;      font-weight: 700;&#10;      line-height: 1;&#10;      margin: 2px 0;&#10;    }&#10;&#10;    .date-month-time {&#10;      font-size: 0.65rem;&#10;      font-weight: 500;&#10;      opacity: 0.85;&#10;    }&#10;&#10;    .date-year {&#10;      font-size: 0.6rem;&#10;      font-weight: 400;&#10;      opacity: 0.65;&#10;      margin-top: 2px;&#10;    }&#10;  }&#10;&#10;  body.light-mode .notice-date-icon {&#10;    background: color.adjust($color-light-surface, $lightness: -4%);&#10;    color: $color-light-accent;&#10;  }&#10;}&#10;&#10;.notice-blurb.notice-warning {&#10;  border-left-color: $color-blurb-border-warning;&#10;}&#10;&#10;.notice-blurb.notice-info {&#10;  border-left-color: $color-blurb-border-info;&#10;}&#10;&#10;.notice-blurb.notice-critical {&#10;  border-left-color: $color-blurb-border-critical;&#10;}&#10;&#10;// Light Mode Overrides&#10;body.light-mode .notice-blurb {&#10;  background: $color-light-surface;&#10;  color: $color-light-text;&#10;&#10;  .notice-title {&#10;    color: $color-light-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    color: $color-light-text;&#10;  }&#10;&#10;  .notice-date {&#10;    color: color.adjust($color-light-text, $lightness: -30%);&#10;  }&#10;}&#10;&#10;// Dark Mode Enhancements (optional redundancy)&#10;body.dark-mode .notice-blurb {&#10;  background: $color-dark-surface;&#10;&#10;  .notice-title {&#10;    color: $color-dark-accent;&#10;  }&#10;&#10;  .notice-content {&#10;    color: $color-dark-text;&#10;  }&#10;&#10;  .notice-date {&#10;    color: $color-dark-text;&#10;  }&#10;}&#10;&#10;// Empty State&#10;.no-notices {&#10;  text-align: center;&#10;  color: $color-light-link-accent;&#10;  font-style: italic;&#10;  margin: 2rem 0;&#10;}&#10;&#10;// CCG Info Links Section Styling&#10;.ccg-info-links {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  margin: 2.5rem 0 2rem 0;&#10;  text-align: center;&#10;}&#10;&#10;.ccg-links-row {&#10;  display: flex;&#10;  flex-direction: row;&#10;  justify-content: center;&#10;  gap: 2.5rem;&#10;  margin-top: 1.5rem;&#10;}&#10;&#10;.ccg-link-btn {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: flex-start;&#10;  background: none;&#10;  border: none;&#10;  outline: none;&#10;  text-decoration: none;&#10;  cursor: pointer;&#10;  padding: 1.25rem 2.25rem 1.5rem 2.25rem;&#10;  border-radius: 14px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.08);&#10;  transition: background 0.18s, box-shadow 0.18s, transform 0.12s;&#10;  min-width: 120px;&#10;  min-height: 120px;&#10;}&#10;&#10;.ccg-link-btn:focus,&#10;.ccg-link-btn:hover {&#10;  background: color.adjust($color-dark-surface, $lightness: 8%);&#10;  box-shadow: 0 4px 16px rgba(0,0,0,0.13);&#10;  transform: translateY(-2px) scale(1.03);&#10;}&#10;&#10;body.light-mode .ccg-link-btn:focus,&#10;body.light-mode .ccg-link-btn:hover {&#10;  background: color.adjust($color-light-surface, $lightness: -2%);&#10;}&#10;&#10;.ccg-link-icon {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  margin-bottom: 0.5rem;&#10;  width: 48px;&#10;  height: 48px;&#10;}&#10;&#10;.ccg-link-icon svg {&#10;  width: 40px;&#10;  height: 40px;&#10;  display: block;&#10;}&#10;&#10;.ccg-link-label {&#10;  display: block;&#10;  margin-top: 0.25rem;&#10;  font-size: 1.08rem;&#10;  font-family: $header-text, serif;&#10;  font-weight: 600;&#10;  letter-spacing: 0.01em;&#10;  color: inherit;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.ts" />
              <option name="originalContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
              <option name="updatedContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;import { MongoClient } from &quot;https://deno.land/x/mongo@v0.32.0/mod.ts&quot;;&#10;import &quot;https://deno.land/std@0.224.0/dotenv/load.ts&quot;;&#10;&#10;// MongoDB Connection&#10;const mongoUri = Deno.env.get(&quot;MONGODB_URI&quot;);&#10;if (!mongoUri) {&#10;  throw new Error(&quot;MONGODB_URI is not set in the environment variables.&quot;);&#10;}&#10;const client = new MongoClient();&#10;await client.connect(mongoUri);&#10;const db = client.database();&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>