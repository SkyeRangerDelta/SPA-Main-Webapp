<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/release.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/release.yml" />
              <option name="originalContent" value="name: Release &amp; Publish&#10;&#10;on:&#10;  push:&#10;    branches: [master, Experimental]&#10;&#10;permissions:&#10;  contents: write&#10;&#10;concurrency:&#10;  group: release-${{ github.ref }}&#10;  cancel-in-progress: false&#10;&#10;jobs:&#10;  release:&#10;    name: semantic-release&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - uses: actions/checkout@v4&#10;        with: { fetch-depth: 0 }&#10;      - uses: actions/setup-node@v4&#10;        with: { node-version: 20 }&#10;      - name: Install release deps&#10;        run: npm i -D semantic-release @semantic-release/git&#10;      - name: semantic-release&#10;        env:&#10;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#10;        run: npx semantic-release&#10;&#10;  build-and-push-frontend:&#10;    name: Build &amp; Push Frontend Docker Image&#10;    runs-on: ubuntu-latest&#10;    needs: release&#10;    permissions:&#10;      contents: read&#10;      packages: write&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v4&#10;      - name: Log in to GitHub Container Registry&#10;        uses: docker/login-action@v3&#10;        with:&#10;          registry: ghcr.io&#10;          username: ${{ github.actor }}&#10;          password: ${{ secrets.GITHUB_TOKEN }}&#10;      - name: Extract repository name&#10;        id: repo&#10;        run: echo &quot;REPO=${GITHUB_REPOSITORY,,}&quot; &gt;&gt; $GITHUB_ENV&#10;      - name: Set image tag&#10;        id: tag&#10;        run: |&#10;          if [[ &quot;${GITHUB_REF##*/}&quot; == &quot;master&quot; ]]; then&#10;            echo &quot;TAG=latest&quot; &gt;&gt; $GITHUB_ENV&#10;          elif [[ &quot;${GITHUB_REF##*/}&quot; == &quot;Experimental&quot; ]]; then&#10;            echo &quot;TAG=experimental&quot; &gt;&gt; $GITHUB_ENV&#10;          else&#10;            echo &quot;TAG=${GITHUB_REF##*/}&quot; &gt;&gt; $GITHUB_ENV&#10;          fi&#10;      - name: Build frontend Docker image&#10;        run: |&#10;          docker build -t ghcr.io/${{ env.REPO }}/spa-main-frontend:${{ env.TAG }} ./frontend&#10;      - name: Push frontend Docker image&#10;        run: |&#10;          docker push ghcr.io/${{ env.REPO }}/spa-main-frontend:${{ env.TAG }}&#10;&#10;  build-and-push-backend:&#10;    name: Build &amp; Push Backend Docker Image&#10;    runs-on: ubuntu-latest&#10;    needs: release&#10;    permissions:&#10;      contents: read&#10;      packages: write&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v4&#10;      - name: Log in to GitHub Container Registry&#10;        uses: docker/login-action@v3&#10;        with:&#10;          registry: ghcr.io&#10;          username: ${{ github.actor }}&#10;          password: ${{ secrets.GITHUB_TOKEN }}&#10;      - name: Extract repository name&#10;        id: repo&#10;        run: echo &quot;REPO=${GITHUB_REPOSITORY,,}&quot; &gt;&gt; $GITHUB_ENV&#10;      - name: Set image tag&#10;        id: tag&#10;        run: |&#10;          if [[ &quot;${GITHUB_REF##*/}&quot; == &quot;master&quot; ]]; then&#10;            echo &quot;TAG=latest&quot; &gt;&gt; $GITHUB_ENV&#10;          elif [[ &quot;${GITHUB_REF##*/}&quot; == &quot;Experimental&quot; ]]; then&#10;            echo &quot;TAG=experimental&quot; &gt;&gt; $GITHUB_ENV&#10;          else&#10;            echo &quot;TAG=${GITHUB_REF##*/}&quot; &gt;&gt; $GITHUB_ENV&#10;          fi&#10;      - name: Build backend Docker image&#10;        run: |&#10;          docker build -t ghcr.io/${{ env.REPO }}/spa-main-backend:${{ env.TAG }} ./API&#10;      - name: Push backend Docker image&#10;        run: |&#10;          docker push ghcr.io/${{ env.REPO }}/spa-main-backend:${{ env.TAG }}&#10;" />
              <option name="updatedContent" value="name: Release &amp; Publish&#10;&#10;on:&#10;  push:&#10;    branches: [master, Experimental]&#10;&#10;permissions:&#10;  contents: write&#10;&#10;concurrency:&#10;  group: release-${{ github.ref }}&#10;  cancel-in-progress: false&#10;&#10;jobs:&#10;  release:&#10;    name: semantic-release&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - uses: actions/checkout@v4&#10;        with: { fetch-depth: 0 }&#10;      - uses: actions/setup-node@v4&#10;        with: { node-version: 20 }&#10;      - name: Install release deps&#10;        run: npm i -D semantic-release @semantic-release/git&#10;      - name: semantic-release&#10;        env:&#10;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#10;        run: npx semantic-release&#10;&#10;  build-and-push-frontend:&#10;    name: Build &amp; Push Frontend Docker Image&#10;    runs-on: ubuntu-latest&#10;    needs: release&#10;    permissions:&#10;      contents: read&#10;      packages: write&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v4&#10;      - name: Log in to GitHub Container Registry&#10;        uses: docker/login-action@v3&#10;        with:&#10;          registry: ghcr.io&#10;          username: ${{ github.actor }}&#10;          password: ${{ secrets.GITHUB_TOKEN }}&#10;      - name: Extract repository name&#10;        id: repo&#10;        run: echo &quot;REPO=${GITHUB_REPOSITORY,,}&quot; &gt;&gt; $GITHUB_ENV&#10;      - name: Set image tag&#10;        id: tag&#10;        run: |&#10;          if [[ &quot;${GITHUB_REF##*/}&quot; == &quot;master&quot; ]]; then&#10;            echo &quot;TAG=latest&quot; &gt;&gt; $GITHUB_ENV&#10;          elif [[ &quot;${GITHUB_REF##*/}&quot; == &quot;Experimental&quot; ]]; then&#10;            echo &quot;TAG=experimental&quot; &gt;&gt; $GITHUB_ENV&#10;          else&#10;            echo &quot;TAG=${GITHUB_REF##*/}&quot; &gt;&gt; $GITHUB_ENV&#10;          fi&#10;      - name: Build frontend Docker image&#10;        run: |&#10;          docker build -t ghcr.io/${{ github.repository_owner }}/spa-frontend:${{ env.TAG }} ./frontend&#10;      - name: Push frontend Docker image&#10;        run: |&#10;          docker push ghcr.io/${{ github.repository_owner }}/spa-frontend:${{ env.TAG }}&#10;&#10;  build-and-push-backend:&#10;    name: Build &amp; Push Backend Docker Image&#10;    runs-on: ubuntu-latest&#10;    needs: release&#10;    permissions:&#10;      contents: read&#10;      packages: write&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v4&#10;      - name: Log in to GitHub Container Registry&#10;        uses: docker/login-action@v3&#10;        with:&#10;          registry: ghcr.io&#10;          username: ${{ github.actor }}&#10;          password: ${{ secrets.GITHUB_TOKEN }}&#10;      - name: Extract repository name&#10;        id: repo&#10;        run: echo &quot;REPO=${GITHUB_REPOSITORY,,}&quot; &gt;&gt; $GITHUB_ENV&#10;      - name: Set image tag&#10;        id: tag&#10;        run: |&#10;          if [[ &quot;${GITHUB_REF##*/}&quot; == &quot;master&quot; ]]; then&#10;            echo &quot;TAG=latest&quot; &gt;&gt; $GITHUB_ENV&#10;          elif [[ &quot;${GITHUB_REF##*/}&quot; == &quot;Experimental&quot; ]]; then&#10;            echo &quot;TAG=experimental&quot; &gt;&gt; $GITHUB_ENV&#10;          else&#10;            echo &quot;TAG=${GITHUB_REF##*/}&quot; &gt;&gt; $GITHUB_ENV&#10;          fi&#10;      - name: Build backend Docker image&#10;        run: |&#10;          docker build -t ghcr.io/${{ github.repository_owner }}/spa-backend:${{ env.TAG }} ./API&#10;      - name: Push backend Docker image&#10;        run: |&#10;          docker push ghcr.io/${{ github.repository_owner }}/spa-backend:${{ env.TAG }}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/API/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/API/main.ts" />
              <option name="originalContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;import &quot;https://deno.land/std@0.224.0/dotenv/load.ts&quot;;&#10;import { DBHandler } from &quot;./Utilities/DBHandler.ts&quot;;&#10;import { MainRouter } from &quot;./Routes/MainRouter.ts&quot;;&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;const port = parseInt( Deno.env.get('APP_PORT') || '4100' ) || 4100;&#10;const hostname = Deno.env.get('APP_HOST') || &quot;0.0.0.0&quot;;&#10;&#10;const Mongo = new DBHandler();&#10;&#10;// Attach Mongo&#10;app.use( async ( ctx, next ) =&gt; {&#10;  ctx.state.Mongo = Mongo;&#10;  await next();&#10;});&#10;&#10;// Log&#10;app.use( async ( ctx, next ) =&gt; {&#10;  const start = Date.now();&#10;  await next();&#10;  const ms = Date.now() - start;&#10;  console.log(`${ctx.request.method} ${ctx.request.url} - ${ms}ms`);&#10;});&#10;&#10;// Pages/Routes&#10;app.use( MainRouter.routes(), MainRouter.allowedMethods() );&#10;&#10;// app.use( async ( ctx, next ) =&gt; {&#10;//   const indexPath = Deno.cwd() + &quot;/frontend/dist/spa-main-webapp/browser&quot;;&#10;//&#10;//   try {&#10;//     await ctx.send({&#10;//       root: indexPath,&#10;//       index: &quot;index.html&quot;,&#10;//     });&#10;//   }&#10;//   catch (error) {&#10;//     console.error(&quot;Error serving index.html:&quot;, error);&#10;//     ctx.response.status = 500;&#10;//     ctx.response.body = &quot;Internal Server Error&quot;;&#10;//     await next();&#10;//   }&#10;// });&#10;&#10;// Error handling&#10;app.use( ( ctx ) =&gt; {&#10;  if (ctx.response.status === 404) {&#10;    ctx.response.body = &quot;404 Not Found&quot;;&#10;  } else if (ctx.response.status &gt;= 500) {&#10;    ctx.response.body = &quot;500 Internal Server Error&quot;;&#10;  }&#10;} );&#10;&#10;// Start the server&#10;console.log( `Serving app on ${ hostname }:${ port }` );&#10;await app.listen( { port: port, hostname: hostname } );" />
              <option name="updatedContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;import &quot;https://deno.land/std@0.224.0/dotenv/load.ts&quot;;&#10;import { DBHandler } from &quot;./Utilities/DBHandler.ts&quot;;&#10;import { MainRouter } from &quot;./Routes/MainRouter.ts&quot;;&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;const port = parseInt( Deno.env.get('APP_PORT') || '4100' ) || 4100;&#10;const hostname = Deno.env.get('APP_HOST') || &quot;0.0.0.0&quot;;&#10;&#10;const Mongo = new DBHandler();&#10;&#10;// Attach Mongo&#10;app.use( async ( ctx, next ) =&gt; {&#10;  ctx.state.Mongo = Mongo;&#10;  await next();&#10;});&#10;&#10;// Log&#10;app.use( async ( ctx, next ) =&gt; {&#10;  const start = Date.now();&#10;  await next();&#10;  const ms = Date.now() - start;&#10;  console.log(`${ctx.request.method} ${ctx.request.url} - ${ms}ms`);&#10;});&#10;&#10;// Pages/Routes&#10;app.use( MainRouter.routes(), MainRouter.allowedMethods() );&#10;&#10;// app.use( async ( ctx, next ) =&gt; {&#10;//   const indexPath = Deno.cwd() + &quot;/frontend/dist/spa-main-webapp/browser&quot;;&#10;//&#10;//   try {&#10;//     await ctx.send({&#10;//       root: indexPath,&#10;//       index: &quot;index.html&quot;,&#10;//     });&#10;//   }&#10;//   catch (error) {&#10;//     console.error(&quot;Error serving index.html:&quot;, error);&#10;//     ctx.response.status = 500;&#10;//     ctx.response.body = &quot;Internal Server Error&quot;;&#10;//     await next();&#10;//   }&#10;// });&#10;&#10;// Error handling&#10;app.use( ( ctx ) =&gt; {&#10;  if (ctx.response.status === 404) {&#10;    ctx.response.status = 404;&#10;    ctx.response.body = { error: &quot;404 Not Found&quot; };&#10;  } else if (ctx.response.status &gt;= 500) {&#10;    ctx.response.status = 500;&#10;    ctx.response.body = { error: &quot;500 Internal Server Error&quot; };&#10;  }&#10;} );&#10;&#10;// Start the server&#10;console.log( `Serving app on ${ hostname }:${ port }` );&#10;await app.listen( { port: port, hostname: hostname } );" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deno.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deno.json" />
              <option name="originalContent" value="{&#10;  &quot;tasks&quot;: {&#10;    &quot;dev&quot;: &quot;deno run --allow-net --allow-env --allow-read --watch API/main.ts&quot;,&#10;    &quot;start&quot;: &quot;deno run --allow-net --allow-env --allow-read API/main.ts&quot;&#10;  },&#10;  &quot;imports&quot;: {&#10;    &quot;@std/assert&quot;: &quot;jsr:@std/assert@1&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;tasks&quot;: {&#10;    &quot;dev&quot;: &quot;deno run --allow-net --allow-env --allow-read --watch API/main.ts&quot;,&#10;    &quot;start&quot;: &quot;deno run --allow-net --allow-env --allow-read API/main.ts&quot;,&#10;    &quot;docker:build&quot;: &quot;docker build -t spa-backend ./API &amp;&amp; docker build -t spa-frontend ./frontend&quot;&#10;  },&#10;  &quot;imports&quot;: {&#10;    &quot;@std/assert&quot;: &quot;jsr:@std/assert@1&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/entrypoint.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/entrypoint.sh" />
              <option name="originalContent" value="#!/bin/sh&#10;: &quot;${API_PORT:=4100}&quot;&#10;: &quot;${API_HOST:=localhost}&quot;&#10;envsubst '$API_HOST $API_PORT' &lt; /etc/nginx/nginx.conf.template &gt; /etc/nginx/nginx.conf&#10;exec nginx -g 'daemon off;'&#10;" />
              <option name="updatedContent" value="#!/bin/sh&#10;: &quot;${API_PORT:=4100}&quot;&#10;: &quot;${API_HOST:=localhost}&quot;&#10;envsubst '$API_HOST $API_PORT' &lt; /etc/nginx/nginx.conf.template &gt; /etc/nginx/nginx.conf&#10;exec nginx -g 'daemon off;'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/nginx.conf" />
              <option name="originalContent" value="events {}&#10;http {&#10;  server {&#10;    listen 80;&#10;    root /usr/share/nginx/html;&#10;    index index.html;&#10;&#10;    location /api/ {&#10;      proxy_pass http://$API_HOST:$API_PORT;&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="events {}&#10;http {&#10;  include /etc/nginx/mime.types;&#10;  server {&#10;    listen 80;&#10;    root /usr/share/nginx/html;&#10;    index index.html;&#10;&#10;    location /api/ {&#10;      proxy_pass http://$API_HOST:$API_PORT;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/footer.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/footer.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.ts" />
              <option name="originalContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
              <option name="updatedContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;import { MongoClient } from &quot;https://deno.land/x/mongo@v0.32.0/mod.ts&quot;;&#10;import &quot;https://deno.land/std@0.224.0/dotenv/load.ts&quot;;&#10;&#10;// MongoDB Connection&#10;const mongoUri = Deno.env.get(&quot;MONGODB_URI&quot;);&#10;if (!mongoUri) {&#10;  throw new Error(&quot;MONGODB_URI is not set in the environment variables.&quot;);&#10;}&#10;const client = new MongoClient();&#10;await client.connect(mongoUri);&#10;const db = client.database();&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@semantic-release/git&quot;: &quot;^10.0.1&quot;,&#10;    &quot;semantic-release&quot;: &quot;^24.2.7&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;docker:build&quot;: &quot;docker build -t spa-backend ./API &amp;&amp; docker build -t spa-frontend ./frontend&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@semantic-release/git&quot;: &quot;^10.0.1&quot;,&#10;    &quot;semantic-release&quot;: &quot;^24.2.7&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;docker:build&quot;: &quot;docker build -t SPA-Backend ./API &amp;&amp; docker build -t SPA-Frontend ./frontend&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>