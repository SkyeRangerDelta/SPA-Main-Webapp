<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/app/footer.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/footer.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/header.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/header.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/intro.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/intro.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notice-board/notice-board.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notice-board/notice-board.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;import { DbHandlerService } from '../services/db-handler-service';&#10;import { Notice } from '../TypeDefs';&#10;import { NgTemplateOutlet } from '@angular/common';&#10;import { NoticeBlurb } from '../notice-blurb/notice-blurb';&#10;&#10;@Component({&#10;  selector: 'app-notice-board',&#10;  imports: [&#10;    NgTemplateOutlet,&#10;    NoticeBlurb&#10;  ],&#10;  templateUrl: './notice-board.html',&#10;  styleUrl: './notice-board.scss'&#10;})&#10;export class NoticeBoard {&#10;  notices: Notice[] = [];&#10;&#10;  constructor( private dbService: DbHandlerService ) {&#10;    this.loadNotices();&#10;  }&#10;&#10;  loadNotices() {&#10;    this.dbService.getNotices().subscribe( ( noticesRes: any ) =&gt; {&#10;      if ( noticesRes &amp;&amp; noticesRes.length &gt; 0 ) {&#10;        console.log( `Found ${ noticesRes.length } notices.` );&#10;      }&#10;      else {&#10;        console.log( 'No notices found.' );&#10;      }&#10;    } );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { DbHandlerService } from '../services/db-handler-service';&#10;import { Notice } from '../TypeDefs';&#10;import { NgTemplateOutlet } from '@angular/common';&#10;import { NoticeBlurb } from '../notice-blurb/notice-blurb';&#10;&#10;@Component({&#10;  selector: 'app-notice-board',&#10;  imports: [&#10;    NgTemplateOutlet,&#10;    NoticeBlurb&#10;  ],&#10;  templateUrl: './notice-board.html',&#10;  styleUrl: './notice-board.scss'&#10;})&#10;export class NoticeBoard {&#10;  notices: Notice[] = [];&#10;  page = 1;&#10;  pageSize = 16;&#10;  loading = false;&#10;  hasMore = true;&#10;&#10;  constructor( private dbService: DbHandlerService ) {&#10;    this.loadNotices();&#10;  }&#10;&#10;  loadNotices() {&#10;    this.loading = true;&#10;    const offset = ( this.page - 1 ) * this.pageSize;&#10;    this.dbService.getNotices( this.pageSize, offset ).subscribe( ( notices: Notice[] ) =&gt; {&#10;      this.notices = notices;&#10;      this.loading = false;&#10;      this.hasMore = notices.length === this.pageSize;&#10;    } );&#10;  }&#10;&#10;  nextPage() {&#10;    if ( this.hasMore ) {&#10;      this.page++;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;&#10;  prevPage() {&#10;    if ( this.page &gt; 1 ) {&#10;      this.page--;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices-page/notices-page.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices-page/notices-page.ts" />
              <option name="originalContent" value="import { Component, Input } from '@angular/core';&#10;import { NoticeBoard } from '../notice-board/notice-board';&#10;import { DbHandlerService } from '../services/db-handler-service';&#10;import { Notice } from '../TypeDefs';&#10;&#10;@Component({&#10;  selector: 'app-notices-page',&#10;  imports: [&#10;    NoticeBoard&#10;  ],&#10;  templateUrl: './notices-page.html',&#10;  styleUrl: './notices-page.scss'&#10;})&#10;export class NoticesPage {&#10;  @Input() notices: Notice[] = [];&#10;&#10;  page = 1;&#10;  pageSize = 16;&#10;  loading = false;&#10;  hasMore = true;&#10;&#10;  constructor(private dbService: DbHandlerService) {&#10;    this.loadNotices();&#10;  }&#10;&#10;  loadNotices() {&#10;    this.loading = true;&#10;    const offset = (this.page - 1) * this.pageSize;&#10;    this.dbService.getNotices(this.pageSize, offset).subscribe((notices: Notice[]) =&gt; {&#10;      this.notices = notices;&#10;      this.loading = false;&#10;      this.hasMore = notices.length === this.pageSize;&#10;    });&#10;  }&#10;&#10;  nextPage() {&#10;    if (this.hasMore) {&#10;      this.page++;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;&#10;  prevPage() {&#10;    if (this.page &gt; 1) {&#10;      this.page--;&#10;      this.loadNotices();&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { NoticeBoard } from '../notice-board/notice-board';&#10;&#10;@Component({&#10;  selector: 'app-notices-page',&#10;  imports: [&#10;    NoticeBoard&#10;  ],&#10;  templateUrl: './notices-page.html',&#10;  styleUrl: './notices-page.scss'&#10;})&#10;export class NoticesPage {}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/notices.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/notices.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/services/db-handler-service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/services/db-handler-service.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { catchError, map, Observable, of } from 'rxjs';&#10;import { Department, NoticeRes } from '../TypeDefs';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class DbHandlerService {&#10;&#10;  private apiEndpoint = '/api/v1/';&#10;  private noticesEndpoint = this.apiEndpoint + 'GetNotices';&#10;  private recordsEndpoint = this.apiEndpoint + 'GetRecords';&#10;&#10;  constructor ( private http: HttpClient ) {  }&#10;&#10;  getNotices( limit?: number ) {&#10;    return this.http.get(&#10;      `${this.noticesEndpoint}?limit=${limit || 5}`,&#10;    ).pipe(&#10;      map( (data: any) =&gt; {&#10;        if ( !data || !Array.isArray(data) ) {&#10;          return [];&#10;        }&#10;&#10;        // Assuming the data is an array of notices&#10;        return data.map((notice: any) =&gt; {&#10;          return {&#10;            id: notice.id,&#10;            title: notice.title,&#10;            content: notice.content,&#10;            date: new Date(notice.date)&#10;          };&#10;        });&#10;      } ),&#10;      catchError( ( e: unknown ) =&gt; {&#10;        console.error('Error fetching notices:', e);&#10;        return [];&#10;      } )&#10;    );&#10;  }&#10;&#10;  getNoticeById(id: number): Observable&lt;NoticeRes&gt; {&#10;    return this.http.get(`${this.noticesEndpoint}?id=${id}`).pipe(&#10;      map((data: any) =&gt; {&#10;        return {&#10;          status: data.status,&#10;          message: data.message,&#10;          success: data.success,&#10;          notice: data.notice || null&#10;        } as NoticeRes;&#10;      }),&#10;      catchError(( e: any ) =&gt; {&#10;        console.error('Error fetching notice by id:', e);&#10;&#10;        if ( e.status === 500 ) {&#10;          return of({&#10;            status: 500,&#10;            message: 'Error fetching notice',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;          );&#10;        }&#10;&#10;        return of(&#10;          {&#10;            status: e.status || 500,&#10;            message: e.message || 'Unknown error occurred',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;        );&#10;      })&#10;    );&#10;  }&#10;&#10;  getDepartments() {&#10;    return this.http.get(`${this.apiEndpoint}GetDepartments`).pipe(&#10;      map((data: any) =&gt; {&#10;        return data.departments;&#10;      }),&#10;      catchError((e: any) =&gt; {&#10;        console.error('Error fetching departments:', e);&#10;        return of([] as Department[]); // Return an empty array on error&#10;      }&#10;    ));&#10;  }&#10;&#10;  getRecords() {&#10;    return this.http.get(this.recordsEndpoint);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { catchError, map, Observable, of } from 'rxjs';&#10;import { Department, NoticeRes } from '../TypeDefs';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class DbHandlerService {&#10;&#10;  private apiEndpoint = '/api/v1/';&#10;  private noticesEndpoint = this.apiEndpoint + 'GetNotices';&#10;  private recordsEndpoint = this.apiEndpoint + 'GetRecords';&#10;&#10;  constructor ( private http: HttpClient ) {  }&#10;&#10;  getNotices( limit?: number, offset?: number ) {&#10;    const params = [];&#10;    if ( limit !== undefined ) params.push( `limit=${limit}` );&#10;    if ( offset !== undefined ) params.push( `offset=${offset}` );&#10;    const query = params.length ? `?${params.join('&amp;')}` : '';&#10;    return this.http.get(&#10;      `${this.noticesEndpoint}${query}`,&#10;    ).pipe(&#10;      map( (data: any) =&gt; {&#10;        // If API returns {notices: [...], ...}&#10;        if ( data &amp;&amp; Array.isArray(data.notices) ) {&#10;          return data.notices;&#10;        }&#10;        // Fallback for old response&#10;        if ( Array.isArray(data) ) {&#10;          return data;&#10;        }&#10;        return [];&#10;      } ),&#10;      catchError( ( e: unknown ) =&gt; {&#10;        console.error('Error fetching notices:', e);&#10;        return [];&#10;      } )&#10;    );&#10;  }&#10;&#10;  getNoticeById(id: number): Observable&lt;NoticeRes&gt; {&#10;    return this.http.get(`${this.noticesEndpoint}?id=${id}`).pipe(&#10;      map((data: any) =&gt; {&#10;        return {&#10;          status: data.status,&#10;          message: data.message,&#10;          success: data.success,&#10;          notice: data.notice || null&#10;        } as NoticeRes;&#10;      }),&#10;      catchError(( e: any ) =&gt; {&#10;        console.error('Error fetching notice by id:', e);&#10;&#10;        if ( e.status === 500 ) {&#10;          return of({&#10;            status: 500,&#10;            message: 'Error fetching notice',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;          );&#10;        }&#10;&#10;        return of(&#10;          {&#10;            status: e.status || 500,&#10;            message: e.message || 'Unknown error occurred',&#10;            success: false,&#10;            notice: null&#10;          } as NoticeRes&#10;        );&#10;      })&#10;    );&#10;  }&#10;&#10;  getDepartments() {&#10;    return this.http.get(`${this.apiEndpoint}GetDepartments`).pipe(&#10;      map((data: any) =&gt; {&#10;        return data.departments;&#10;      }),&#10;      catchError((e: any) =&gt; {&#10;        console.error('Error fetching departments:', e);&#10;        return of([] as Department[]); // Return an empty array on error&#10;      }&#10;    ));&#10;  }&#10;&#10;  getRecords() {&#10;    return this.http.get(this.recordsEndpoint);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.ts" />
              <option name="originalContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
              <option name="updatedContent" value="/*&#10; * ======= SARIM PORT AUTHORITY WEBAPP =======&#10; * This file is part of the Sarim Port Authority WebApp.&#10; * It is licensed under the GNU General Public License v3.0.&#10; *&#10; * Composed by: SkyeRangerDelta&#10; *&#10; * The Sarim Port Authority is a fictional entity for the&#10; * entertainment purposes of the communities of Planetary&#10; * Dynamics (PlDyn) and Christian Crew Gaming (CCG).&#10; * ============================================&#10; */&#10;&#10;// Imports&#10;import { Application } from &quot;https://deno.land/x/oak/mod.ts&quot;;&#10;import { MongoClient } from &quot;https://deno.land/x/mongo@v0.32.0/mod.ts&quot;;&#10;import &quot;https://deno.land/std@0.224.0/dotenv/load.ts&quot;;&#10;&#10;// MongoDB Connection&#10;const mongoUri = Deno.env.get(&quot;MONGODB_URI&quot;);&#10;if (!mongoUri) {&#10;  throw new Error(&quot;MONGODB_URI is not set in the environment variables.&quot;);&#10;}&#10;const client = new MongoClient();&#10;await client.connect(mongoUri);&#10;const db = client.database();&#10;&#10;// Server&#10;const app = new Application();&#10;&#10;app.use( (ctx) =&gt; {&#10;  ctx.response.body = &quot;Welcome to the Sarim Port Authority WebApp!&quot;;&#10;});&#10;&#10;await app.listen( { port: 3000 } );" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>